---
kind: Service
apiVersion: v1
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
  name: bespoked-service
  namespace: default
spec:
  selector:
    k8s-app: bespoked
  #type: NodePort
  type: LoadBalancer
  ports:
  - nodePort: 30080
    port: 180
    targetPort: tls-incoming
    protocol: TCP
    name: lets-encrypt-comms
  - nodePort: 30088
    port: 188
    targetPort: dash-incoming
    protocol: TCP
    name: public-stats-comms
  - nodePort: 30443
    port: 443
    targetPort: ing-incoming
    protocol: TCP
    name: kubernetes-ingress-comms
  - nodePort: 30444
    port: 444
    targetPort: ingtls-incoming
    protocol: TCP
    name: lets-encrypt-ingress-comms
  #ports:
  #- name: http
  #  port: 80
  #  targetPort: ing-incoming
  ### The default backend must be of type NodePort.
  ##type: NodePort
  ##ports:
  ##- nodePort: 30080
  ##  port: 55101
  ##  targetPort: 55101
  ##  protocol: TCP
  ##  name: http-lets-encrypt
  ##- nodePort: 30001
  ##  port: 55001
  ##  targetPort: 55001
  ##  protocol: TCP
  ##  name: http
  ##- name: http
  ##  port: 80
  ##  targetPort: tls-incoming
  ##- name: https
  ##  port: 443
  ##  targetPort: ing-incoming

#apiVersion: v1
#kind: Service
#metadata:
#  name: bespoked-service
#  namespace: default
#spec:
#  # The default backend must be of type NodePort.
#  type: NodePort
#  ports:
#  - nodePort: 80
#    port: 55101
#    targetPort: 55101
#    protocol: TCP
#    name: http-lets-encrypt
#  - nodePort: 30001
#    port: 55001
#    targetPort: 55001
#    protocol: TCP
#    name: http
#  selector:
#    k8s-app: bespoked
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: bespoked-health-service
#  namespace: default
#spec:
#  # The default backend must be of type NodePort.
#  type: NodePort
#  ports:
#  - nodePort: 30002
#    port: 8889
#    targetPort: 8889
#    protocol: TCP
#    name: http
#  selector:
#    k8s-app: bespoked
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: bespoked-dashboard-service
#  namespace: default
#spec:
#  # The default backend must be of type NodePort.
#  type: NodePort
#  ports:
#  - nodePort: 30003
#    port: 8890
#    targetPort: 8890
#    protocol: TCP
#    name: http
#  selector:
#    k8s-app: bespoked
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-controller
  namespace: default
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: ingress-controller
  namespace: default
rules:
- apiGroups:
  - ""
  - "extensions"
  resources:
  - configmaps
  - secrets
  - services
  - endpoints
  - ingresses
  - nodes
  - pods
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - "extensions"
  - ""
  resources:
  - ingresses
  - ingresses/status
  verbs:
  - get
  - update
  - create
  - list
  - patch
  - delete
  - watch
- apiGroups:
  - "*"
  - ""
  resources:
  - events
  - certificates
  - secrets
  verbs:
  - create
  - list
  - update
  - get
  - patch
  - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: ingress-controller
  namespace: default
subjects:
  - kind: ServiceAccount
    namespace: default
    name: ingress-controller
roleRef:
  kind: ClusterRole
  name: ingress-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: bespoked-replication-controller
  namespace: default
  labels:
    k8s-app: bespoked
spec:
  #TODO: make this possible to have more than 1 controller alive simultaneously.
  replicas: 1
  selector:
    k8s-app: bespoked
    version: rv1 #NOTE: this is re-written
  template:
    metadata:
      namespace: default
      labels:
        k8s-app: bespoked
        version: rv1 #NOTE: this is re-written
    spec:
      terminationGracePeriodSeconds: 600
      serviceAccount: ingress-controller
      containers:
      - image: #NOTE: this is re-written via manifest.rb
        imagePullPolicy: IfNotPresent
        ports:
        - name: ing-incoming
          containerPort: 55001
        - name: dash-incoming
          containerPort: 55002
        - name: tls-incoming
          containerPort: 55101
        - name: ingtls-incoming
          containerPort: 55102
        livenessProbe:
          httpGet:
            path: /healthz
            port: 55101
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 45
        env:
        #- name: HTTP_X_FORWARDED_PROTO
        #  value: "https"
        name: bespoked-controller
        resources:
          limits:
            cpu: 1200m
            memory: 200Mi
          requests:
            cpu: 200m
            memory: 100Mi
        command: ["bundle", "exec", "ruby", "main.rb"]
